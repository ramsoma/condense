/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package newshog.thrift.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TweetInfo implements org.apache.thrift.TBase<TweetInfo, TweetInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TweetInfo");

  private static final org.apache.thrift.protocol.TField TEMP_FIELD_DESC = new org.apache.thrift.protocol.TField("temp", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOP_HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("topHashtags", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOP_TWEETS_FIELD_DESC = new org.apache.thrift.protocol.TField("topTweets", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SENTIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("sentiment", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TweetInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TweetInfoTupleSchemeFactory());
  }

  /**
   * 
   * @see TweetoMeter
   */
  public TweetoMeter temp; // required
  public List<String> topHashtags; // required
  public List<String> topTweets; // required
  public int sentiment; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TweetoMeter
     */
    TEMP((short)1, "temp"),
    TOP_HASHTAGS((short)2, "topHashtags"),
    TOP_TWEETS((short)3, "topTweets"),
    SENTIMENT((short)4, "sentiment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEMP
          return TEMP;
        case 2: // TOP_HASHTAGS
          return TOP_HASHTAGS;
        case 3: // TOP_TWEETS
          return TOP_TWEETS;
        case 4: // SENTIMENT
          return SENTIMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENTIMENT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEMP, new org.apache.thrift.meta_data.FieldMetaData("temp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TweetoMeter.class)));
    tmpMap.put(_Fields.TOP_HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("topHashtags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TOP_TWEETS, new org.apache.thrift.meta_data.FieldMetaData("topTweets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SENTIMENT, new org.apache.thrift.meta_data.FieldMetaData("sentiment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TweetInfo.class, metaDataMap);
  }

  public TweetInfo() {
  }

  public TweetInfo(
    TweetoMeter temp,
    List<String> topHashtags,
    List<String> topTweets,
    int sentiment)
  {
    this();
    this.temp = temp;
    this.topHashtags = topHashtags;
    this.topTweets = topTweets;
    this.sentiment = sentiment;
    setSentimentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TweetInfo(TweetInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTemp()) {
      this.temp = other.temp;
    }
    if (other.isSetTopHashtags()) {
      List<String> __this__topHashtags = new ArrayList<String>();
      for (String other_element : other.topHashtags) {
        __this__topHashtags.add(other_element);
      }
      this.topHashtags = __this__topHashtags;
    }
    if (other.isSetTopTweets()) {
      List<String> __this__topTweets = new ArrayList<String>();
      for (String other_element : other.topTweets) {
        __this__topTweets.add(other_element);
      }
      this.topTweets = __this__topTweets;
    }
    this.sentiment = other.sentiment;
  }

  public TweetInfo deepCopy() {
    return new TweetInfo(this);
  }

  @Override
  public void clear() {
    this.temp = null;
    this.topHashtags = null;
    this.topTweets = null;
    setSentimentIsSet(false);
    this.sentiment = 0;
  }

  /**
   * 
   * @see TweetoMeter
   */
  public TweetoMeter getTemp() {
    return this.temp;
  }

  /**
   * 
   * @see TweetoMeter
   */
  public TweetInfo setTemp(TweetoMeter temp) {
    this.temp = temp;
    return this;
  }

  public void unsetTemp() {
    this.temp = null;
  }

  /** Returns true if field temp is set (has been assigned a value) and false otherwise */
  public boolean isSetTemp() {
    return this.temp != null;
  }

  public void setTempIsSet(boolean value) {
    if (!value) {
      this.temp = null;
    }
  }

  public int getTopHashtagsSize() {
    return (this.topHashtags == null) ? 0 : this.topHashtags.size();
  }

  public java.util.Iterator<String> getTopHashtagsIterator() {
    return (this.topHashtags == null) ? null : this.topHashtags.iterator();
  }

  public void addToTopHashtags(String elem) {
    if (this.topHashtags == null) {
      this.topHashtags = new ArrayList<String>();
    }
    this.topHashtags.add(elem);
  }

  public List<String> getTopHashtags() {
    return this.topHashtags;
  }

  public TweetInfo setTopHashtags(List<String> topHashtags) {
    this.topHashtags = topHashtags;
    return this;
  }

  public void unsetTopHashtags() {
    this.topHashtags = null;
  }

  /** Returns true if field topHashtags is set (has been assigned a value) and false otherwise */
  public boolean isSetTopHashtags() {
    return this.topHashtags != null;
  }

  public void setTopHashtagsIsSet(boolean value) {
    if (!value) {
      this.topHashtags = null;
    }
  }

  public int getTopTweetsSize() {
    return (this.topTweets == null) ? 0 : this.topTweets.size();
  }

  public java.util.Iterator<String> getTopTweetsIterator() {
    return (this.topTweets == null) ? null : this.topTweets.iterator();
  }

  public void addToTopTweets(String elem) {
    if (this.topTweets == null) {
      this.topTweets = new ArrayList<String>();
    }
    this.topTweets.add(elem);
  }

  public List<String> getTopTweets() {
    return this.topTweets;
  }

  public TweetInfo setTopTweets(List<String> topTweets) {
    this.topTweets = topTweets;
    return this;
  }

  public void unsetTopTweets() {
    this.topTweets = null;
  }

  /** Returns true if field topTweets is set (has been assigned a value) and false otherwise */
  public boolean isSetTopTweets() {
    return this.topTweets != null;
  }

  public void setTopTweetsIsSet(boolean value) {
    if (!value) {
      this.topTweets = null;
    }
  }

  public int getSentiment() {
    return this.sentiment;
  }

  public TweetInfo setSentiment(int sentiment) {
    this.sentiment = sentiment;
    setSentimentIsSet(true);
    return this;
  }

  public void unsetSentiment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENTIMENT_ISSET_ID);
  }

  /** Returns true if field sentiment is set (has been assigned a value) and false otherwise */
  public boolean isSetSentiment() {
    return EncodingUtils.testBit(__isset_bitfield, __SENTIMENT_ISSET_ID);
  }

  public void setSentimentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENTIMENT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEMP:
      if (value == null) {
        unsetTemp();
      } else {
        setTemp((TweetoMeter)value);
      }
      break;

    case TOP_HASHTAGS:
      if (value == null) {
        unsetTopHashtags();
      } else {
        setTopHashtags((List<String>)value);
      }
      break;

    case TOP_TWEETS:
      if (value == null) {
        unsetTopTweets();
      } else {
        setTopTweets((List<String>)value);
      }
      break;

    case SENTIMENT:
      if (value == null) {
        unsetSentiment();
      } else {
        setSentiment((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEMP:
      return getTemp();

    case TOP_HASHTAGS:
      return getTopHashtags();

    case TOP_TWEETS:
      return getTopTweets();

    case SENTIMENT:
      return Integer.valueOf(getSentiment());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEMP:
      return isSetTemp();
    case TOP_HASHTAGS:
      return isSetTopHashtags();
    case TOP_TWEETS:
      return isSetTopTweets();
    case SENTIMENT:
      return isSetSentiment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TweetInfo)
      return this.equals((TweetInfo)that);
    return false;
  }

  public boolean equals(TweetInfo that) {
    if (that == null)
      return false;

    boolean this_present_temp = true && this.isSetTemp();
    boolean that_present_temp = true && that.isSetTemp();
    if (this_present_temp || that_present_temp) {
      if (!(this_present_temp && that_present_temp))
        return false;
      if (!this.temp.equals(that.temp))
        return false;
    }

    boolean this_present_topHashtags = true && this.isSetTopHashtags();
    boolean that_present_topHashtags = true && that.isSetTopHashtags();
    if (this_present_topHashtags || that_present_topHashtags) {
      if (!(this_present_topHashtags && that_present_topHashtags))
        return false;
      if (!this.topHashtags.equals(that.topHashtags))
        return false;
    }

    boolean this_present_topTweets = true && this.isSetTopTweets();
    boolean that_present_topTweets = true && that.isSetTopTweets();
    if (this_present_topTweets || that_present_topTweets) {
      if (!(this_present_topTweets && that_present_topTweets))
        return false;
      if (!this.topTweets.equals(that.topTweets))
        return false;
    }

    boolean this_present_sentiment = true;
    boolean that_present_sentiment = true;
    if (this_present_sentiment || that_present_sentiment) {
      if (!(this_present_sentiment && that_present_sentiment))
        return false;
      if (this.sentiment != that.sentiment)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TweetInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TweetInfo typedOther = (TweetInfo)other;

    lastComparison = Boolean.valueOf(isSetTemp()).compareTo(typedOther.isSetTemp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.temp, typedOther.temp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopHashtags()).compareTo(typedOther.isSetTopHashtags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopHashtags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topHashtags, typedOther.topHashtags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopTweets()).compareTo(typedOther.isSetTopTweets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopTweets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topTweets, typedOther.topTweets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentiment()).compareTo(typedOther.isSetSentiment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentiment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentiment, typedOther.sentiment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TweetInfo(");
    boolean first = true;

    sb.append("temp:");
    if (this.temp == null) {
      sb.append("null");
    } else {
      sb.append(this.temp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topHashtags:");
    if (this.topHashtags == null) {
      sb.append("null");
    } else {
      sb.append(this.topHashtags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topTweets:");
    if (this.topTweets == null) {
      sb.append("null");
    } else {
      sb.append(this.topTweets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sentiment:");
    sb.append(this.sentiment);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TweetInfoStandardSchemeFactory implements SchemeFactory {
    public TweetInfoStandardScheme getScheme() {
      return new TweetInfoStandardScheme();
    }
  }

  private static class TweetInfoStandardScheme extends StandardScheme<TweetInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TweetInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.temp = TweetoMeter.findByValue(iprot.readI32());
              struct.setTempIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOP_HASHTAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.topHashtags = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.topHashtags.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTopHashtagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOP_TWEETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.topTweets = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.topTweets.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setTopTweetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SENTIMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sentiment = iprot.readI32();
              struct.setSentimentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TweetInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.temp != null) {
        oprot.writeFieldBegin(TEMP_FIELD_DESC);
        oprot.writeI32(struct.temp.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.topHashtags != null) {
        oprot.writeFieldBegin(TOP_HASHTAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.topHashtags.size()));
          for (String _iter6 : struct.topHashtags)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.topTweets != null) {
        oprot.writeFieldBegin(TOP_TWEETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.topTweets.size()));
          for (String _iter7 : struct.topTweets)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SENTIMENT_FIELD_DESC);
      oprot.writeI32(struct.sentiment);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TweetInfoTupleSchemeFactory implements SchemeFactory {
    public TweetInfoTupleScheme getScheme() {
      return new TweetInfoTupleScheme();
    }
  }

  private static class TweetInfoTupleScheme extends TupleScheme<TweetInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TweetInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTemp()) {
        optionals.set(0);
      }
      if (struct.isSetTopHashtags()) {
        optionals.set(1);
      }
      if (struct.isSetTopTweets()) {
        optionals.set(2);
      }
      if (struct.isSetSentiment()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTemp()) {
        oprot.writeI32(struct.temp.getValue());
      }
      if (struct.isSetTopHashtags()) {
        {
          oprot.writeI32(struct.topHashtags.size());
          for (String _iter8 : struct.topHashtags)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetTopTweets()) {
        {
          oprot.writeI32(struct.topTweets.size());
          for (String _iter9 : struct.topTweets)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetSentiment()) {
        oprot.writeI32(struct.sentiment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TweetInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.temp = TweetoMeter.findByValue(iprot.readI32());
        struct.setTempIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.topHashtags = new ArrayList<String>(_list10.size);
          for (int _i11 = 0; _i11 < _list10.size; ++_i11)
          {
            String _elem12; // required
            _elem12 = iprot.readString();
            struct.topHashtags.add(_elem12);
          }
        }
        struct.setTopHashtagsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.topTweets = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15; // required
            _elem15 = iprot.readString();
            struct.topTweets.add(_elem15);
          }
        }
        struct.setTopTweetsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sentiment = iprot.readI32();
        struct.setSentimentIsSet(true);
      }
    }
  }

}

