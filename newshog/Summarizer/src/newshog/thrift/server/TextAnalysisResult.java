/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package newshog.thrift.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TextAnalysisResult implements org.apache.thrift.TBase<TextAnalysisResult, TextAnalysisResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TextAnalysisResult");

  private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WIKI_LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("wikiLinks", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOP_TWEETS_FIELD_DESC = new org.apache.thrift.protocol.TField("topTweets", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TOP_HASHTAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("topHashtags", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField DOC_SENTIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("docSentiment", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TWITTER_SENTIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("twitterSentiment", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TextAnalysisResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TextAnalysisResultTupleSchemeFactory());
  }

  public String summary; // required
  public List<WikiInfo> wikiLinks; // required
  public List<String> topTweets; // required
  public List<String> topHashtags; // required
  public String docSentiment; // required
  public String twitterSentiment; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUMMARY((short)1, "summary"),
    WIKI_LINKS((short)2, "wikiLinks"),
    TOP_TWEETS((short)3, "topTweets"),
    TOP_HASHTAGS((short)4, "topHashtags"),
    DOC_SENTIMENT((short)5, "docSentiment"),
    TWITTER_SENTIMENT((short)6, "twitterSentiment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUMMARY
          return SUMMARY;
        case 2: // WIKI_LINKS
          return WIKI_LINKS;
        case 3: // TOP_TWEETS
          return TOP_TWEETS;
        case 4: // TOP_HASHTAGS
          return TOP_HASHTAGS;
        case 5: // DOC_SENTIMENT
          return DOC_SENTIMENT;
        case 6: // TWITTER_SENTIMENT
          return TWITTER_SENTIMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WIKI_LINKS, new org.apache.thrift.meta_data.FieldMetaData("wikiLinks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WikiInfo.class))));
    tmpMap.put(_Fields.TOP_TWEETS, new org.apache.thrift.meta_data.FieldMetaData("topTweets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TOP_HASHTAGS, new org.apache.thrift.meta_data.FieldMetaData("topHashtags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DOC_SENTIMENT, new org.apache.thrift.meta_data.FieldMetaData("docSentiment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TWITTER_SENTIMENT, new org.apache.thrift.meta_data.FieldMetaData("twitterSentiment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TextAnalysisResult.class, metaDataMap);
  }

  public TextAnalysisResult() {
  }

  public TextAnalysisResult(
    String summary,
    List<WikiInfo> wikiLinks,
    List<String> topTweets,
    List<String> topHashtags,
    String docSentiment,
    String twitterSentiment)
  {
    this();
    this.summary = summary;
    this.wikiLinks = wikiLinks;
    this.topTweets = topTweets;
    this.topHashtags = topHashtags;
    this.docSentiment = docSentiment;
    this.twitterSentiment = twitterSentiment;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TextAnalysisResult(TextAnalysisResult other) {
    if (other.isSetSummary()) {
      this.summary = other.summary;
    }
    if (other.isSetWikiLinks()) {
      List<WikiInfo> __this__wikiLinks = new ArrayList<WikiInfo>();
      for (WikiInfo other_element : other.wikiLinks) {
        __this__wikiLinks.add(new WikiInfo(other_element));
      }
      this.wikiLinks = __this__wikiLinks;
    }
    if (other.isSetTopTweets()) {
      List<String> __this__topTweets = new ArrayList<String>();
      for (String other_element : other.topTweets) {
        __this__topTweets.add(other_element);
      }
      this.topTweets = __this__topTweets;
    }
    if (other.isSetTopHashtags()) {
      List<String> __this__topHashtags = new ArrayList<String>();
      for (String other_element : other.topHashtags) {
        __this__topHashtags.add(other_element);
      }
      this.topHashtags = __this__topHashtags;
    }
    if (other.isSetDocSentiment()) {
      this.docSentiment = other.docSentiment;
    }
    if (other.isSetTwitterSentiment()) {
      this.twitterSentiment = other.twitterSentiment;
    }
  }

  public TextAnalysisResult deepCopy() {
    return new TextAnalysisResult(this);
  }

  @Override
  public void clear() {
    this.summary = null;
    this.wikiLinks = null;
    this.topTweets = null;
    this.topHashtags = null;
    this.docSentiment = null;
    this.twitterSentiment = null;
  }

  public String getSummary() {
    return this.summary;
  }

  public TextAnalysisResult setSummary(String summary) {
    this.summary = summary;
    return this;
  }

  public void unsetSummary() {
    this.summary = null;
  }

  /** Returns true if field summary is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary() {
    return this.summary != null;
  }

  public void setSummaryIsSet(boolean value) {
    if (!value) {
      this.summary = null;
    }
  }

  public int getWikiLinksSize() {
    return (this.wikiLinks == null) ? 0 : this.wikiLinks.size();
  }

  public java.util.Iterator<WikiInfo> getWikiLinksIterator() {
    return (this.wikiLinks == null) ? null : this.wikiLinks.iterator();
  }

  public void addToWikiLinks(WikiInfo elem) {
    if (this.wikiLinks == null) {
      this.wikiLinks = new ArrayList<WikiInfo>();
    }
    this.wikiLinks.add(elem);
  }

  public List<WikiInfo> getWikiLinks() {
    return this.wikiLinks;
  }

  public TextAnalysisResult setWikiLinks(List<WikiInfo> wikiLinks) {
    this.wikiLinks = wikiLinks;
    return this;
  }

  public void unsetWikiLinks() {
    this.wikiLinks = null;
  }

  /** Returns true if field wikiLinks is set (has been assigned a value) and false otherwise */
  public boolean isSetWikiLinks() {
    return this.wikiLinks != null;
  }

  public void setWikiLinksIsSet(boolean value) {
    if (!value) {
      this.wikiLinks = null;
    }
  }

  public int getTopTweetsSize() {
    return (this.topTweets == null) ? 0 : this.topTweets.size();
  }

  public java.util.Iterator<String> getTopTweetsIterator() {
    return (this.topTweets == null) ? null : this.topTweets.iterator();
  }

  public void addToTopTweets(String elem) {
    if (this.topTweets == null) {
      this.topTweets = new ArrayList<String>();
    }
    this.topTweets.add(elem);
  }

  public List<String> getTopTweets() {
    return this.topTweets;
  }

  public TextAnalysisResult setTopTweets(List<String> topTweets) {
    this.topTweets = topTweets;
    return this;
  }

  public void unsetTopTweets() {
    this.topTweets = null;
  }

  /** Returns true if field topTweets is set (has been assigned a value) and false otherwise */
  public boolean isSetTopTweets() {
    return this.topTweets != null;
  }

  public void setTopTweetsIsSet(boolean value) {
    if (!value) {
      this.topTweets = null;
    }
  }

  public int getTopHashtagsSize() {
    return (this.topHashtags == null) ? 0 : this.topHashtags.size();
  }

  public java.util.Iterator<String> getTopHashtagsIterator() {
    return (this.topHashtags == null) ? null : this.topHashtags.iterator();
  }

  public void addToTopHashtags(String elem) {
    if (this.topHashtags == null) {
      this.topHashtags = new ArrayList<String>();
    }
    this.topHashtags.add(elem);
  }

  public List<String> getTopHashtags() {
    return this.topHashtags;
  }

  public TextAnalysisResult setTopHashtags(List<String> topHashtags) {
    this.topHashtags = topHashtags;
    return this;
  }

  public void unsetTopHashtags() {
    this.topHashtags = null;
  }

  /** Returns true if field topHashtags is set (has been assigned a value) and false otherwise */
  public boolean isSetTopHashtags() {
    return this.topHashtags != null;
  }

  public void setTopHashtagsIsSet(boolean value) {
    if (!value) {
      this.topHashtags = null;
    }
  }

  public String getDocSentiment() {
    return this.docSentiment;
  }

  public TextAnalysisResult setDocSentiment(String docSentiment) {
    this.docSentiment = docSentiment;
    return this;
  }

  public void unsetDocSentiment() {
    this.docSentiment = null;
  }

  /** Returns true if field docSentiment is set (has been assigned a value) and false otherwise */
  public boolean isSetDocSentiment() {
    return this.docSentiment != null;
  }

  public void setDocSentimentIsSet(boolean value) {
    if (!value) {
      this.docSentiment = null;
    }
  }

  public String getTwitterSentiment() {
    return this.twitterSentiment;
  }

  public TextAnalysisResult setTwitterSentiment(String twitterSentiment) {
    this.twitterSentiment = twitterSentiment;
    return this;
  }

  public void unsetTwitterSentiment() {
    this.twitterSentiment = null;
  }

  /** Returns true if field twitterSentiment is set (has been assigned a value) and false otherwise */
  public boolean isSetTwitterSentiment() {
    return this.twitterSentiment != null;
  }

  public void setTwitterSentimentIsSet(boolean value) {
    if (!value) {
      this.twitterSentiment = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUMMARY:
      if (value == null) {
        unsetSummary();
      } else {
        setSummary((String)value);
      }
      break;

    case WIKI_LINKS:
      if (value == null) {
        unsetWikiLinks();
      } else {
        setWikiLinks((List<WikiInfo>)value);
      }
      break;

    case TOP_TWEETS:
      if (value == null) {
        unsetTopTweets();
      } else {
        setTopTweets((List<String>)value);
      }
      break;

    case TOP_HASHTAGS:
      if (value == null) {
        unsetTopHashtags();
      } else {
        setTopHashtags((List<String>)value);
      }
      break;

    case DOC_SENTIMENT:
      if (value == null) {
        unsetDocSentiment();
      } else {
        setDocSentiment((String)value);
      }
      break;

    case TWITTER_SENTIMENT:
      if (value == null) {
        unsetTwitterSentiment();
      } else {
        setTwitterSentiment((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUMMARY:
      return getSummary();

    case WIKI_LINKS:
      return getWikiLinks();

    case TOP_TWEETS:
      return getTopTweets();

    case TOP_HASHTAGS:
      return getTopHashtags();

    case DOC_SENTIMENT:
      return getDocSentiment();

    case TWITTER_SENTIMENT:
      return getTwitterSentiment();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUMMARY:
      return isSetSummary();
    case WIKI_LINKS:
      return isSetWikiLinks();
    case TOP_TWEETS:
      return isSetTopTweets();
    case TOP_HASHTAGS:
      return isSetTopHashtags();
    case DOC_SENTIMENT:
      return isSetDocSentiment();
    case TWITTER_SENTIMENT:
      return isSetTwitterSentiment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TextAnalysisResult)
      return this.equals((TextAnalysisResult)that);
    return false;
  }

  public boolean equals(TextAnalysisResult that) {
    if (that == null)
      return false;

    boolean this_present_summary = true && this.isSetSummary();
    boolean that_present_summary = true && that.isSetSummary();
    if (this_present_summary || that_present_summary) {
      if (!(this_present_summary && that_present_summary))
        return false;
      if (!this.summary.equals(that.summary))
        return false;
    }

    boolean this_present_wikiLinks = true && this.isSetWikiLinks();
    boolean that_present_wikiLinks = true && that.isSetWikiLinks();
    if (this_present_wikiLinks || that_present_wikiLinks) {
      if (!(this_present_wikiLinks && that_present_wikiLinks))
        return false;
      if (!this.wikiLinks.equals(that.wikiLinks))
        return false;
    }

    boolean this_present_topTweets = true && this.isSetTopTweets();
    boolean that_present_topTweets = true && that.isSetTopTweets();
    if (this_present_topTweets || that_present_topTweets) {
      if (!(this_present_topTweets && that_present_topTweets))
        return false;
      if (!this.topTweets.equals(that.topTweets))
        return false;
    }

    boolean this_present_topHashtags = true && this.isSetTopHashtags();
    boolean that_present_topHashtags = true && that.isSetTopHashtags();
    if (this_present_topHashtags || that_present_topHashtags) {
      if (!(this_present_topHashtags && that_present_topHashtags))
        return false;
      if (!this.topHashtags.equals(that.topHashtags))
        return false;
    }

    boolean this_present_docSentiment = true && this.isSetDocSentiment();
    boolean that_present_docSentiment = true && that.isSetDocSentiment();
    if (this_present_docSentiment || that_present_docSentiment) {
      if (!(this_present_docSentiment && that_present_docSentiment))
        return false;
      if (!this.docSentiment.equals(that.docSentiment))
        return false;
    }

    boolean this_present_twitterSentiment = true && this.isSetTwitterSentiment();
    boolean that_present_twitterSentiment = true && that.isSetTwitterSentiment();
    if (this_present_twitterSentiment || that_present_twitterSentiment) {
      if (!(this_present_twitterSentiment && that_present_twitterSentiment))
        return false;
      if (!this.twitterSentiment.equals(that.twitterSentiment))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TextAnalysisResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TextAnalysisResult typedOther = (TextAnalysisResult)other;

    lastComparison = Boolean.valueOf(isSetSummary()).compareTo(typedOther.isSetSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, typedOther.summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWikiLinks()).compareTo(typedOther.isSetWikiLinks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWikiLinks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wikiLinks, typedOther.wikiLinks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopTweets()).compareTo(typedOther.isSetTopTweets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopTweets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topTweets, typedOther.topTweets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopHashtags()).compareTo(typedOther.isSetTopHashtags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopHashtags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topHashtags, typedOther.topHashtags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocSentiment()).compareTo(typedOther.isSetDocSentiment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocSentiment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docSentiment, typedOther.docSentiment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTwitterSentiment()).compareTo(typedOther.isSetTwitterSentiment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTwitterSentiment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.twitterSentiment, typedOther.twitterSentiment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TextAnalysisResult(");
    boolean first = true;

    sb.append("summary:");
    if (this.summary == null) {
      sb.append("null");
    } else {
      sb.append(this.summary);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wikiLinks:");
    if (this.wikiLinks == null) {
      sb.append("null");
    } else {
      sb.append(this.wikiLinks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topTweets:");
    if (this.topTweets == null) {
      sb.append("null");
    } else {
      sb.append(this.topTweets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topHashtags:");
    if (this.topHashtags == null) {
      sb.append("null");
    } else {
      sb.append(this.topHashtags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("docSentiment:");
    if (this.docSentiment == null) {
      sb.append("null");
    } else {
      sb.append(this.docSentiment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("twitterSentiment:");
    if (this.twitterSentiment == null) {
      sb.append("null");
    } else {
      sb.append(this.twitterSentiment);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TextAnalysisResultStandardSchemeFactory implements SchemeFactory {
    public TextAnalysisResultStandardScheme getScheme() {
      return new TextAnalysisResultStandardScheme();
    }
  }

  private static class TextAnalysisResultStandardScheme extends StandardScheme<TextAnalysisResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TextAnalysisResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.summary = iprot.readString();
              struct.setSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WIKI_LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.wikiLinks = new ArrayList<WikiInfo>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  WikiInfo _elem18; // required
                  _elem18 = new WikiInfo();
                  _elem18.read(iprot);
                  struct.wikiLinks.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setWikiLinksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOP_TWEETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.topTweets = new ArrayList<String>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  String _elem21; // required
                  _elem21 = iprot.readString();
                  struct.topTweets.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setTopTweetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOP_HASHTAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.topHashtags = new ArrayList<String>(_list22.size);
                for (int _i23 = 0; _i23 < _list22.size; ++_i23)
                {
                  String _elem24; // required
                  _elem24 = iprot.readString();
                  struct.topHashtags.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setTopHashtagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOC_SENTIMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.docSentiment = iprot.readString();
              struct.setDocSentimentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TWITTER_SENTIMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.twitterSentiment = iprot.readString();
              struct.setTwitterSentimentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TextAnalysisResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.summary != null) {
        oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
        oprot.writeString(struct.summary);
        oprot.writeFieldEnd();
      }
      if (struct.wikiLinks != null) {
        oprot.writeFieldBegin(WIKI_LINKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.wikiLinks.size()));
          for (WikiInfo _iter25 : struct.wikiLinks)
          {
            _iter25.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.topTweets != null) {
        oprot.writeFieldBegin(TOP_TWEETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.topTweets.size()));
          for (String _iter26 : struct.topTweets)
          {
            oprot.writeString(_iter26);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.topHashtags != null) {
        oprot.writeFieldBegin(TOP_HASHTAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.topHashtags.size()));
          for (String _iter27 : struct.topHashtags)
          {
            oprot.writeString(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.docSentiment != null) {
        oprot.writeFieldBegin(DOC_SENTIMENT_FIELD_DESC);
        oprot.writeString(struct.docSentiment);
        oprot.writeFieldEnd();
      }
      if (struct.twitterSentiment != null) {
        oprot.writeFieldBegin(TWITTER_SENTIMENT_FIELD_DESC);
        oprot.writeString(struct.twitterSentiment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TextAnalysisResultTupleSchemeFactory implements SchemeFactory {
    public TextAnalysisResultTupleScheme getScheme() {
      return new TextAnalysisResultTupleScheme();
    }
  }

  private static class TextAnalysisResultTupleScheme extends TupleScheme<TextAnalysisResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TextAnalysisResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSummary()) {
        optionals.set(0);
      }
      if (struct.isSetWikiLinks()) {
        optionals.set(1);
      }
      if (struct.isSetTopTweets()) {
        optionals.set(2);
      }
      if (struct.isSetTopHashtags()) {
        optionals.set(3);
      }
      if (struct.isSetDocSentiment()) {
        optionals.set(4);
      }
      if (struct.isSetTwitterSentiment()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSummary()) {
        oprot.writeString(struct.summary);
      }
      if (struct.isSetWikiLinks()) {
        {
          oprot.writeI32(struct.wikiLinks.size());
          for (WikiInfo _iter28 : struct.wikiLinks)
          {
            _iter28.write(oprot);
          }
        }
      }
      if (struct.isSetTopTweets()) {
        {
          oprot.writeI32(struct.topTweets.size());
          for (String _iter29 : struct.topTweets)
          {
            oprot.writeString(_iter29);
          }
        }
      }
      if (struct.isSetTopHashtags()) {
        {
          oprot.writeI32(struct.topHashtags.size());
          for (String _iter30 : struct.topHashtags)
          {
            oprot.writeString(_iter30);
          }
        }
      }
      if (struct.isSetDocSentiment()) {
        oprot.writeString(struct.docSentiment);
      }
      if (struct.isSetTwitterSentiment()) {
        oprot.writeString(struct.twitterSentiment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TextAnalysisResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.summary = iprot.readString();
        struct.setSummaryIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.wikiLinks = new ArrayList<WikiInfo>(_list31.size);
          for (int _i32 = 0; _i32 < _list31.size; ++_i32)
          {
            WikiInfo _elem33; // required
            _elem33 = new WikiInfo();
            _elem33.read(iprot);
            struct.wikiLinks.add(_elem33);
          }
        }
        struct.setWikiLinksIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.topTweets = new ArrayList<String>(_list34.size);
          for (int _i35 = 0; _i35 < _list34.size; ++_i35)
          {
            String _elem36; // required
            _elem36 = iprot.readString();
            struct.topTweets.add(_elem36);
          }
        }
        struct.setTopTweetsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.topHashtags = new ArrayList<String>(_list37.size);
          for (int _i38 = 0; _i38 < _list37.size; ++_i38)
          {
            String _elem39; // required
            _elem39 = iprot.readString();
            struct.topHashtags.add(_elem39);
          }
        }
        struct.setTopHashtagsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.docSentiment = iprot.readString();
        struct.setDocSentimentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.twitterSentiment = iprot.readString();
        struct.setTwitterSentimentIsSet(true);
      }
    }
  }

}

