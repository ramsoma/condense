/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package newshog.thrift.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WikiInfo implements org.apache.thrift.TBase<WikiInfo, WikiInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WikiInfo");

  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("picUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pageUrl", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WikiInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WikiInfoTupleSchemeFactory());
  }

  public String title; // required
  public String desc; // required
  public String picUrl; // required
  public String pageUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    DESC((short)2, "desc"),
    PIC_URL((short)3, "picUrl"),
    PAGE_URL((short)4, "pageUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // DESC
          return DESC;
        case 3: // PIC_URL
          return PIC_URL;
        case 4: // PAGE_URL
          return PAGE_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("picUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("pageUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WikiInfo.class, metaDataMap);
  }

  public WikiInfo() {
  }

  public WikiInfo(
    String title,
    String desc,
    String picUrl,
    String pageUrl)
  {
    this();
    this.title = title;
    this.desc = desc;
    this.picUrl = picUrl;
    this.pageUrl = pageUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WikiInfo(WikiInfo other) {
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetPicUrl()) {
      this.picUrl = other.picUrl;
    }
    if (other.isSetPageUrl()) {
      this.pageUrl = other.pageUrl;
    }
  }

  public WikiInfo deepCopy() {
    return new WikiInfo(this);
  }

  @Override
  public void clear() {
    this.title = null;
    this.desc = null;
    this.picUrl = null;
    this.pageUrl = null;
  }

  public String getTitle() {
    return this.title;
  }

  public WikiInfo setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public WikiInfo setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getPicUrl() {
    return this.picUrl;
  }

  public WikiInfo setPicUrl(String picUrl) {
    this.picUrl = picUrl;
    return this;
  }

  public void unsetPicUrl() {
    this.picUrl = null;
  }

  /** Returns true if field picUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPicUrl() {
    return this.picUrl != null;
  }

  public void setPicUrlIsSet(boolean value) {
    if (!value) {
      this.picUrl = null;
    }
  }

  public String getPageUrl() {
    return this.pageUrl;
  }

  public WikiInfo setPageUrl(String pageUrl) {
    this.pageUrl = pageUrl;
    return this;
  }

  public void unsetPageUrl() {
    this.pageUrl = null;
  }

  /** Returns true if field pageUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPageUrl() {
    return this.pageUrl != null;
  }

  public void setPageUrlIsSet(boolean value) {
    if (!value) {
      this.pageUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case PIC_URL:
      if (value == null) {
        unsetPicUrl();
      } else {
        setPicUrl((String)value);
      }
      break;

    case PAGE_URL:
      if (value == null) {
        unsetPageUrl();
      } else {
        setPageUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return getTitle();

    case DESC:
      return getDesc();

    case PIC_URL:
      return getPicUrl();

    case PAGE_URL:
      return getPageUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return isSetTitle();
    case DESC:
      return isSetDesc();
    case PIC_URL:
      return isSetPicUrl();
    case PAGE_URL:
      return isSetPageUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WikiInfo)
      return this.equals((WikiInfo)that);
    return false;
  }

  public boolean equals(WikiInfo that) {
    if (that == null)
      return false;

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_picUrl = true && this.isSetPicUrl();
    boolean that_present_picUrl = true && that.isSetPicUrl();
    if (this_present_picUrl || that_present_picUrl) {
      if (!(this_present_picUrl && that_present_picUrl))
        return false;
      if (!this.picUrl.equals(that.picUrl))
        return false;
    }

    boolean this_present_pageUrl = true && this.isSetPageUrl();
    boolean that_present_pageUrl = true && that.isSetPageUrl();
    if (this_present_pageUrl || that_present_pageUrl) {
      if (!(this_present_pageUrl && that_present_pageUrl))
        return false;
      if (!this.pageUrl.equals(that.pageUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(WikiInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WikiInfo typedOther = (WikiInfo)other;

    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(typedOther.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, typedOther.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicUrl()).compareTo(typedOther.isSetPicUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picUrl, typedOther.picUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageUrl()).compareTo(typedOther.isSetPageUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageUrl, typedOther.pageUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WikiInfo(");
    boolean first = true;

    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picUrl:");
    if (this.picUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.picUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageUrl:");
    if (this.pageUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.pageUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WikiInfoStandardSchemeFactory implements SchemeFactory {
    public WikiInfoStandardScheme getScheme() {
      return new WikiInfoStandardScheme();
    }
  }

  private static class WikiInfoStandardScheme extends StandardScheme<WikiInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WikiInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picUrl = iprot.readString();
              struct.setPicUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageUrl = iprot.readString();
              struct.setPageUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WikiInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      if (struct.picUrl != null) {
        oprot.writeFieldBegin(PIC_URL_FIELD_DESC);
        oprot.writeString(struct.picUrl);
        oprot.writeFieldEnd();
      }
      if (struct.pageUrl != null) {
        oprot.writeFieldBegin(PAGE_URL_FIELD_DESC);
        oprot.writeString(struct.pageUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WikiInfoTupleSchemeFactory implements SchemeFactory {
    public WikiInfoTupleScheme getScheme() {
      return new WikiInfoTupleScheme();
    }
  }

  private static class WikiInfoTupleScheme extends TupleScheme<WikiInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WikiInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTitle()) {
        optionals.set(0);
      }
      if (struct.isSetDesc()) {
        optionals.set(1);
      }
      if (struct.isSetPicUrl()) {
        optionals.set(2);
      }
      if (struct.isSetPageUrl()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetPicUrl()) {
        oprot.writeString(struct.picUrl);
      }
      if (struct.isSetPageUrl()) {
        oprot.writeString(struct.pageUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WikiInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(2)) {
        struct.picUrl = iprot.readString();
        struct.setPicUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pageUrl = iprot.readString();
        struct.setPageUrlIsSet(true);
      }
    }
  }

}

